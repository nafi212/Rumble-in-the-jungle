import pygame
import sys
from pytmx.util_pygame import load_pygame
import random

# Init
pygame.init()
info = pygame.display.Info()
WIDTH, HEIGHT = info.current_w, info.current_h
screen = pygame.display.set_mode((WIDTH, HEIGHT), pygame.FULLSCREEN)
pygame.display.set_caption("Rumble in the Jungle")
clock = pygame.time.Clock()
FPS = 60

# Couleurs
WHITE = (255, 255, 255)
RED = (255, 0, 0)

# Joueur
player_img = pygame.Surface((18, 24))
player_img.fill(RED)
player_rect = pygame.Rect(35 * 18, 7*18, 18, 24)
player_vel = pygame.Vector2(0, 0)
gravity = 0.8
on_ground = False

# Map
tmx_data = load_pygame("map/map.tmx")
tile_width = tmx_data.tilewidth
tile_height = tmx_data.tileheight

# Scroll
scroll_x = 0
scroll_y = 0

# Plateformes
solid_tiles = []
for layer in tmx_data.visible_layers:
    if hasattr(layer, "tiles") and layer.name == "map":
        for x, y, gid in layer:
            if gid != 0:
                tile_rect = pygame.Rect(x * tile_width, y * tile_height, tile_width, tile_height)
                solid_tiles.append(tile_rect)

# Crocodiles
def reset_crocodiles():
    return [
        pygame.Rect(237 * tile_width, 40 * tile_height, tile_width, tile_height),
        pygame.Rect(128 * tile_width, 38 * tile_height, tile_width, tile_height),
        pygame.Rect(136 * tile_width, 38 * tile_height, tile_width, tile_height),
        pygame.Rect(144 * tile_width, 38 * tile_height, tile_width, tile_height),
        pygame.Rect(314 * tile_width, 40 * tile_height, tile_width, tile_height),
        pygame.Rect(309 * tile_width, 40 * tile_height, tile_width, tile_height),
        pygame.Rect(310 * tile_width, 40 * tile_height, tile_width, tile_height),
        pygame.Rect(188 * tile_width, 40 * tile_height, tile_width, tile_height),
]


crocodiles = reset_crocodiles()

# Singes
class Monkey:
    def __init__(self, x, y):
        self.pos = pygame.Vector2(x * tile_width, y * tile_height)
        self.projectiles = []
        self.ready = False  # prêt à tirer

    def shoot(self):
        self.projectiles.append({
            "rect": pygame.Rect(self.pos.x + tile_width // 2, self.pos.y + tile_height // 2, 10, 10),
            "vel": pygame.Vector2(-4, -5)
        })

    def update(self):
        for banana in self.projectiles:
            banana["vel"].y += 0.3
            banana["rect"].x += banana["vel"].x
            banana["rect"].y += banana["vel"].y
        self.projectiles = [b for b in self.projectiles if b["rect"].x > 0 and b["rect"].y < HEIGHT]

    def draw(self, surface):
        pygame.draw.rect(surface, (139, 69, 19), (self.pos.x - scroll_x, self.pos.y - scroll_y, tile_width, tile_height))
        for banana in self.projectiles:
            pygame.draw.circle(surface, (255, 255, 0), (banana["rect"].x - scroll_x, banana["rect"].y - scroll_y), 5)

monkeys = [
    Monkey(270, 25),
    Monkey(254, 26),
    Monkey(260, 21),
    Monkey(282, 22)
]


current_monkey_index = 0
monkey_timer = 0

# Serpents
class Snake:
    def __init__(self, path_tiles):
        self.path = [pygame.Vector2(x * tile_width, y * tile_height) for x, y in path_tiles]
        self.index = 0
        self.forward = True
        self.rect = pygame.Rect(self.path[0].x, self.path[0].y, tile_width, tile_height)
        self.speed = 1

    def update(self):
        target = self.path[self.index]
        dx = target.x - self.rect.x
        dy = target.y - self.rect.y

        if abs(dx) > self.speed:
            self.rect.x += self.speed if dx > 0 else -self.speed
        elif abs(dy) > self.speed:
            self.rect.y += self.speed if dy > 0 else -self.speed
        else:
            if self.forward:
                if self.index + 1 < len(self.path):
                    self.index += 1
                else:
                    self.forward = False
                    self.index -= 1
            else:
                if self.index - 1 >= 0:
                    self.index -= 1
                else:
                    self.forward = True
                    self.index += 1

    def draw(self, surface):
        pygame.draw.rect(surface, (255, 165, 0), (self.rect.x - scroll_x, self.rect.y - scroll_y, self.rect.width, self.rect.height))

snakes = [
    Snake([(50, 34), (51, 34), (52, 34), (53, 33), (54, 33), (55, 33), (56, 32), (57, 32),
 (58, 32), (59, 32), (60, 32), (61, 32), (62, 32), (63, 32), (64, 32), (65, 32)]),
    Snake([(116, 37), (117, 37), (118, 37), (120, 37), (119, 37), (120, 37),
 (121, 37), (122, 37), (123, 37)]),
    Snake([(148, 37), (149, 37), (150, 37), (151, 37), (152, 36), (153, 36),
 (154, 35), (155, 35), (156, 35), (157, 35), (158, 35), (159, 35),
 (160, 35), (161, 35), (162, 35), (163, 35), (164, 35), (165, 35),
 (166, 35), (167, 35), (168, 35), (169, 35), (170, 35), (171, 36),
 (172, 36), (173, 36), (174, 37), (175, 37), (176, 38), (177, 39),
 (178, 39), (179, 39), (180, 39), (181, 39), (182, 39), (183, 39),
 (184, 39)]),
    Snake([(184, 39), (183, 39), (182, 39), (181, 39), (180, 39), (179, 39), (178, 39),
 (177, 39), (176, 38), (175, 37), (174, 37), (173, 36), (172, 36), (171, 36),
 (170, 35), (169, 35), (168, 35), (167, 35), (166, 35), (165, 35), (164, 35),
 (163, 35), (162, 35), (161, 35), (160, 35), (159, 35), (158, 35), (157, 35),
 (156, 35), (155, 35), (154, 35), (153, 36), (152, 36), (151, 37), (150, 37),
 (149, 37), (148, 37)]),
]

class GorillaBoss:
    def __init__(self, path_tiles):
        if not path_tiles:
            raise ValueError("Le chemin du gorille est vide.")
        self.path = [pygame.Vector2(x * tile_width, y * tile_height) for x, y in path_tiles]
        self.pos = self.path[0].copy()
        self.vel = pygame.Vector2(0, 0)
        self.gravity = 0.8
        self.on_ground = True
        self.timer = 0
        self.width = int(tile_width * 1.7)
        self.height = int(tile_height * 1.7)
        self.rect = pygame.Rect(int(self.pos.x), int(self.pos.y), self.width, self.height)
        self.target = self.pos.copy()
        self.jump_duration = 40
        self.mode = "walk"
        self.walk_direction = 0  # -1 pour gauche, 1 pour droite
        self.invincible = False
        self.invincibility_timer = 0
        self.spawn_pos = self.path[0].copy()  # pour le respawn
        self.health = 3


    def update(self, dt):
        # Appliquer la gravité
        self.vel.y += self.gravity
        self.vel.y = min(self.vel.y, 20)
        self.pos.y += self.vel.y

        # Appliquer déplacement horizontal
        self.pos.x += self.vel.x

        # Sécurité anti-chute
        if self.pos.y > 2000:
            self.pos = self.path[0].copy()
            self.vel = pygame.Vector2(0, 0)
            self.on_ground = True

        # Atterrissage
        if self.vel.y > 0 and self.pos.y >= self.target.y:
            self.pos.y = self.target.y
            self.vel.y = 0
            self.on_ground = True
            if self.mode == "jump":
                self.vel.x = 0

        # Timer pour changer de mode
        self.timer += dt
        if self.timer > 1500 and self.on_ground:
            self.timer = 0
            self.mode = random.choice(["walk", "jump"])
            if self.mode == "walk":
                self.walk_direction = random.choice([-1, 1])
                self.vel.x = self.walk_direction * 2
            elif self.mode == "jump":
                self.target = random.choice(self.path)
                dx = self.target.x - self.pos.x
                dy = self.target.y - self.pos.y
                self.vel.x = dx / self.jump_duration
                self.vel.y = dy / self.jump_duration - 0.5 * self.gravity * self.jump_duration
                self.on_ground = False

        # Limiter le boss à sa zone
        min_x = min(p.x for p in self.path)
        max_x = max(p.x for p in self.path)
        if self.pos.x < min_x:
            self.pos.x = min_x
            self.vel.x = abs(self.vel.x)
        elif self.pos.x + self.width > max_x + tile_width:
            self.pos.x = max_x + tile_width - self.width
            self.vel.x = -abs(self.vel.x)

        self.rect.x = int(self.pos.x)
        self.rect.y = int(self.pos.y)

        # Gérer invincibilité temporaire après avoir pris un coup
        if self.invincible:
            self.invincibility_timer -= dt
            if self.invincibility_timer <= 0:
                self.invincible = False

    def draw(self, surface):
        if not self.invincible or (pygame.time.get_ticks() // 100) % 2 == 0:
            pygame.draw.rect(
                surface,
                (80, 40, 20),
                (self.rect.x - scroll_x, self.rect.y - scroll_y, self.width, self.height)
            )

# Appel du gorille
gorilla_bosses = [
    GorillaBoss([
        (288, 30), (289, 30), (290, 30), (291, 30), (292, 30),
        (293, 30), (294, 30), (295, 30), (296, 30), (297, 30),
        (298, 30), (299, 30), (300, 30), (301, 30), (302, 30),
        (303, 30), (304, 30), (305, 30)
    ])
]

# Hache
class Axe:
    def __init__(self, x, y):
        self.pos = pygame.Vector2(x * tile_width, y * tile_height)
        self.rect = pygame.Rect(self.pos.x, self.pos.y, tile_width, tile_height)
        self.collected = False

    def draw(self, surface):
        if not self.collected:
            pygame.draw.rect(surface, (160, 160, 160), (self.rect.x - scroll_x, self.rect.y - scroll_y, tile_width, tile_height))

# Spawn de la hache
axe = Axe(273, 31)
has_axe = False

class DoubleJumpBoots:
    def __init__(self, x, y):
        self.pos = pygame.Vector2(x * tile_width, y * tile_height)
        self.rect = pygame.Rect(self.pos.x, self.pos.y, tile_width, tile_height)
        self.collected = False

    def draw(self, surface):
        if not self.collected:
            pygame.draw.rect(
                surface,
                (0, 128, 255),  # Couleur bleue pour les bottes
                (self.rect.x - scroll_x, self.rect.y - scroll_y, tile_width, tile_height)
            )

boots = DoubleJumpBoots(180, 37)
has_double_jump = False
jumps_left = 1
jump_pressed_last_frame = False


# Points de vie
invincible = False
invincibility_timer = 0
hearts = 3
heart_img = pygame.Surface((20, 20))
heart_img.fill((255, 0, 0))


def reset_game():
    global axe, has_axe, player_rect, player_vel, crocodiles, game_over, hearts, invincible, invincibility_timer, has_double_jump, jumps_left, jump_pressed_last_frame, boots
    has_double_jump = False
    jumps_left = 1
    jump_pressed_last_frame = False
    player_rect.x, player_rect.y = 35 * 18, 7 * 18
    player_vel = pygame.Vector2(0, 0)
    crocodiles = reset_crocodiles()
    game_over = False
    hearts = 3
    invincible = False
    invincibility_timer = 0
    axe = Axe(323, 31)
    has_axe = False
    boots = DoubleJumpBoots(230, 37)
    has_double_jump = False
    gorilla_bosses.clear()
    gorilla_bosses.append(GorillaBoss([
        (338, 30), (339, 30), (340, 30), (341, 30), (342, 30), (343, 30),
        (344, 30), (345, 30), (346, 30), (347, 30), (348, 30), (349, 30),
        (350, 30), (351, 30), (352, 30), (353, 30), (354, 30), (355, 30)
    ]))


# Boucle principale
running = True
font = pygame.font.SysFont(None, 72)
game_over = False
crocodiles = reset_crocodiles()
fullscreen = True

while running:
    dt = clock.tick(FPS)
    keys = pygame.key.get_pressed()

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_F11:
                fullscreen = not fullscreen
                if fullscreen:
                    screen = pygame.display.set_mode((WIDTH, HEIGHT), pygame.FULLSCREEN)
                else:
                    screen = pygame.display.set_mode((800, 600))
                    WIDTH, HEIGHT = 800, 600
            elif game_over:
                reset_game()

    if not game_over:

        # Contrôles
        player_vel.x = 0
        if keys[pygame.K_q]:
            player_vel.x = -4
        if keys[pygame.K_d]:
            player_vel.x = 4

        # Système de saut hybride
        if not has_double_jump:
            if keys[pygame.K_SPACE] and on_ground:
                player_vel.y = -15
                on_ground = False
        else:
            if keys[pygame.K_SPACE] and not jump_pressed_last_frame:
                if on_ground:
                    player_vel.y = -15
                    on_ground = False
                    jumps_left = 1
                elif jumps_left > 0:
                    player_vel.y = -15
                    jumps_left -= 1

        jump_pressed_last_frame = keys[pygame.K_SPACE]

        # Physique
        if invincible:
            invincibility_timer -= dt
            if invincibility_timer <= 0:
                invincible = False
        player_vel.y += gravity
        player_rect.y += player_vel.y

        # Collision verticale 
        on_ground = False
        for tile in solid_tiles:
            if player_rect.colliderect(tile):
                if player_vel.y > 0:
                    player_rect.bottom = tile.top
                    player_vel.y = 0
                    on_ground = True
                    if has_double_jump:
                        jumps_left = 2
                elif player_vel.y < 0:
                    player_rect.top = tile.bottom
                    player_vel.y = 0
                    on_ground = False


        # Crocodiles
        for croc in crocodiles[:]:
            if player_rect.colliderect(croc) and player_vel.y > 0:
                crocodiles.remove(croc)
                player_rect.bottom = croc.top
                player_vel.y = 0
                on_ground = True
                if has_double_jump:
                    jumps_left = 2

        # Ramassage de la hache
        if not axe.collected and player_rect.colliderect(axe.rect):
            axe.collected = True
            has_axe = True
            print("Hache récupérée")

        # Ramassage des bottes
        if not boots.collected and player_rect.colliderect(boots.rect):
            boots.collected = True
            has_double_jump = True
            jumps_left = 2
            print("Bottes de double saut récupérées")


        # Déplacement horizontal
        player_rect.x += player_vel.x
        for tile in solid_tiles:
            if player_rect.colliderect(tile):
                if player_vel.x > 0:
                    player_rect.right = tile.left
                elif player_vel.x < 0:
                    player_rect.left = tile.right

        if player_rect.y - scroll_y > HEIGHT + 200 or hearts <= 0:
            game_over = True

        # Scrolling
        margin_x = WIDTH // 2 - 100
        margin_y = HEIGHT // 2 - 30

        if player_rect.centerx - scroll_x < margin_x:
            scroll_x = max(0, player_rect.centerx - margin_x)
        elif player_rect.centerx - scroll_x > WIDTH - margin_x:
            scroll_x = min(tmx_data.width * tile_width - WIDTH, player_rect.centerx - (WIDTH - margin_x))

        if player_rect.centery - scroll_y < margin_y:
            scroll_y = max(0, player_rect.centery - margin_y)
        elif player_rect.centery - scroll_y > HEIGHT - margin_y:
            scroll_y = min(tmx_data.height * tile_height - HEIGHT, player_rect.centery - (HEIGHT - margin_y))

    # Affichage 
    screen.fill((0, 0, 0))

    for layer in tmx_data.visible_layers:
        if hasattr(layer, "tiles"):
            x_min = max(0, scroll_x // tile_width)
            x_max = min(tmx_data.width, (scroll_x + WIDTH) // tile_width + 1)
            y_min = max(0, scroll_y // tile_height)
            y_max = min(tmx_data.height, (scroll_y + HEIGHT) // tile_height + 1)

            for x in range(x_min, x_max):
                for y in range(y_min, y_max):
                    gid = layer.data[y][x]
                    tile = tmx_data.get_tile_image_by_gid(gid)
                    if tile:
                        screen.blit(tile, (x * tile_width - scroll_x, y * tile_height - scroll_y))

    for croc in crocodiles:
        pygame.draw.rect(screen, (0, 255, 0), (croc.x - scroll_x, croc.y - scroll_y, croc.width, croc.height))

# Tir séquentiel des singes
    monkey_timer += dt
    if monkey_timer > 500:
        monkeys[current_monkey_index].shoot()
        current_monkey_index = (current_monkey_index + 1) % len(monkeys)
        monkey_timer = 0

    for monkey in monkeys:
        monkey.update()
        for banana in monkey.projectiles:
            if player_rect.colliderect(banana["rect"]) and not invincible:
                hearts -= 1
                invincible = True
                invincibility_timer = 2000
                player_vel = pygame.Vector2(0, 0)
                break
        monkey.draw(screen)

    for snake in snakes:
        if player_rect.colliderect(snake.rect) and not invincible:
            hearts -= 1
            invincible = True
            invincibility_timer = 2000
            player_vel = pygame.Vector2(0, 0)
            break
        snake.update()
        snake.draw(screen)

   # Collision gorille
    for gorilla in gorilla_bosses[:]:
        if gorilla.health <= 0:
            gorilla_bosses.remove(gorilla)
            continue

        if not game_over:
            gorilla.update(dt)

        if player_rect.colliderect(gorilla.rect):
            if has_axe and player_vel.y > 0 and player_rect.bottom <= gorilla.rect.top + 10 and not gorilla.invincible:
                gorilla.health -= 1
                player_vel.y = -10
                gorilla.invincible = True
                gorilla.invincibility_timer = 1000
                print(f" Gorille touché ! Vie restante : {gorilla.health}")

            elif not invincible:
                hearts -= 1
                invincible = True
                invincibility_timer = 2000
                player_vel = pygame.Vector2(0, 0)

    for gorilla in gorilla_bosses:
        gorilla.draw(screen)

    if not game_over:
        if not invincible or (pygame.time.get_ticks() // 200) % 2 == 0:
            screen.blit(player_img, (player_rect.x - scroll_x, player_rect.y - scroll_y))

    if game_over:
        text = font.render("GAME OVER", True, WHITE)
        screen.blit(text, ((WIDTH - text.get_width()) // 2, HEIGHT // 2 - 50))
        subtext = pygame.font.SysFont(None, 36).render("Appuie sur une touche pour recommencer", True, WHITE)
        screen.blit(subtext, ((WIDTH - subtext.get_width()) // 2, HEIGHT // 2 + 20))

    for i in range(hearts):
        screen.blit(heart_img, (10 + i * 25, 10))

    fps_counter = pygame.font.SysFont(None, 24)
    screen.blit(fps_counter.render(str(int(clock.get_fps())), True, (255, 255, 0)), (10, 10))

    # Affichage bonus actif
    bonus_font = pygame.font.SysFont(None, 24)
    if has_axe:
        bonus_text = bonus_font.render("HACHE ACTIVE", True, (255, 255, 255))
        screen.blit(bonus_text, (WIDTH - bonus_text.get_width() - 20, 10))
    if has_double_jump:
        boots_text = bonus_font.render("BOTTES ACTIVÉES", True, (255, 255, 255))
        screen.blit(boots_text, (WIDTH - boots_text.get_width() - 20, 40))

    # Affichage des objets
    axe.draw(screen)
    boots.draw(screen)


    pygame.display.flip()

pygame.quit()
sys.exit()
